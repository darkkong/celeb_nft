{
  "contractName": "Counters",
  "abi": [],
  "metadata": "{\"compiler\":{\"version\":\"0.5.0+commit.1d4f565a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"author\":\"Matt Condon (@shrugs)\",\"details\":\"Provides counters that can only be incremented or decremented by one. This can be used e.g. to track the number of elements in a mapping, issuing ERC721 ids, or counting request ids. * Include with `using Counters for Counters.Counter;` Since it is not possible to overflow a 256 bit integer with increments of one, `increment` can skip the SafeMath overflow check, thereby saving gas. This does assume however correct usage, in that the underlying `_value` is never directly accessed.\",\"methods\":{},\"title\":\"Counters\"},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/drafts/Counters.sol\":\"Counters\"},\"evmVersion\":\"byzantium\",\"libraries\":{},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/drafts/Counters.sol\":{\"keccak256\":\"0x5eb69360d3441ab2ee799bd7c007cccbffb0896f12b2dfe1456193e2aa180a11\",\"urls\":[\"bzzr://ecd0352164978c418c8f5b0080c972b65e4b07f6afc593fb7cdd856185a458ea\"]},\"@openzeppelin/contracts/math/SafeMath.sol\":{\"keccak256\":\"0xd1804d04fb39689453f673601429a99a0c68c422a981fc338773df9a59180fe9\",\"urls\":[\"bzzr://a7dfb6fc259d0074da840a848461487567e2a6309105dd5c050a4e025f0fa7cb\"]}},\"version\":1}",
  "bytecode": "0x604c602c600b82828239805160001a60731460008114601c57601e565bfe5b5030600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea165627a7a72305820b3354e820c9a1a819bc3cb22b18040643bf021b837e328aabb8926a84ee0472f0029",
  "deployedBytecode": "0x73000000000000000000000000000000000000000030146080604052600080fdfea165627a7a72305820b3354e820c9a1a819bc3cb22b18040643bf021b837e328aabb8926a84ee0472f0029",
  "sourceMap": "627:759:2:-;;132:2:-1;166:7;155:9;146:7;137:37;252:7;246:14;243:1;238:23;232:4;229:33;270:1;265:20;;;;222:63;;265:20;274:9;222:63;;298:9;295:1;288:20;328:4;319:7;311:22;352:7;343;336:24",
  "deployedSourceMap": "627:759:2:-;;;;;;;;",
  "source": "pragma solidity ^0.5.0;\n\nimport \"../math/SafeMath.sol\";\n\n/**\n * @title Counters\n * @author Matt Condon (@shrugs)\n * @dev Provides counters that can only be incremented or decremented by one. This can be used e.g. to track the number\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\n *\n * Include with `using Counters for Counters.Counter;`\n * Since it is not possible to overflow a 256 bit integer with increments of one, `increment` can skip the SafeMath\n * overflow check, thereby saving gas. This does assume however correct usage, in that the underlying `_value` is never\n * directly accessed.\n */\nlibrary Counters {\n    using SafeMath for uint256;\n\n    struct Counter {\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\n        uint256 _value; // default: 0\n    }\n\n    function current(Counter storage counter) internal view returns (uint256) {\n        return counter._value;\n    }\n\n    function increment(Counter storage counter) internal {\n        counter._value += 1;\n    }\n\n    function decrement(Counter storage counter) internal {\n        counter._value = counter._value.sub(1);\n    }\n}\n",
  "sourcePath": "@openzeppelin\\contracts\\drafts\\Counters.sol",
  "ast": {
    "absolutePath": "@openzeppelin/contracts/drafts/Counters.sol",
    "exportedSymbols": {
      "Counters": [
        170
      ]
    },
    "id": 171,
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 123,
        "literals": [
          "solidity",
          "^",
          "0.5",
          ".0"
        ],
        "nodeType": "PragmaDirective",
        "src": "0:23:2"
      },
      {
        "absolutePath": "@openzeppelin/contracts/math/SafeMath.sol",
        "file": "../math/SafeMath.sol",
        "id": 124,
        "nodeType": "ImportDirective",
        "scope": 171,
        "sourceUnit": 366,
        "src": "25:30:2",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "baseContracts": [],
        "contractDependencies": [],
        "contractKind": "library",
        "documentation": "@title Counters\n@author Matt Condon (@shrugs)\n@dev Provides counters that can only be incremented or decremented by one. This can be used e.g. to track the number\nof elements in a mapping, issuing ERC721 ids, or counting request ids.\n * Include with `using Counters for Counters.Counter;`\nSince it is not possible to overflow a 256 bit integer with increments of one, `increment` can skip the SafeMath\noverflow check, thereby saving gas. This does assume however correct usage, in that the underlying `_value` is never\ndirectly accessed.",
        "fullyImplemented": true,
        "id": 170,
        "linearizedBaseContracts": [
          170
        ],
        "name": "Counters",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "id": 127,
            "libraryName": {
              "contractScope": null,
              "id": 125,
              "name": "SafeMath",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 365,
              "src": "656:8:2",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_SafeMath_$365",
                "typeString": "library SafeMath"
              }
            },
            "nodeType": "UsingForDirective",
            "src": "650:27:2",
            "typeName": {
              "id": 126,
              "name": "uint256",
              "nodeType": "ElementaryTypeName",
              "src": "669:7:2",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            }
          },
          {
            "canonicalName": "Counters.Counter",
            "id": 130,
            "members": [
              {
                "constant": false,
                "id": 129,
                "name": "_value",
                "nodeType": "VariableDeclaration",
                "scope": 130,
                "src": "1022:14:2",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                },
                "typeName": {
                  "id": 128,
                  "name": "uint256",
                  "nodeType": "ElementaryTypeName",
                  "src": "1022:7:2",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  }
                },
                "value": null,
                "visibility": "internal"
              }
            ],
            "name": "Counter",
            "nodeType": "StructDefinition",
            "scope": 170,
            "src": "683:374:2",
            "visibility": "public"
          },
          {
            "body": {
              "id": 140,
              "nodeType": "Block",
              "src": "1137:38:2",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "expression": {
                      "argumentTypes": null,
                      "id": 137,
                      "name": "counter",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 132,
                      "src": "1154:7:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_Counter_$130_storage_ptr",
                        "typeString": "struct Counters.Counter storage pointer"
                      }
                    },
                    "id": 138,
                    "isConstant": false,
                    "isLValue": true,
                    "isPure": false,
                    "lValueRequested": false,
                    "memberName": "_value",
                    "nodeType": "MemberAccess",
                    "referencedDeclaration": 129,
                    "src": "1154:14:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "functionReturnParameters": 136,
                  "id": 139,
                  "nodeType": "Return",
                  "src": "1147:21:2"
                }
              ]
            },
            "documentation": null,
            "id": 141,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "current",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 133,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 132,
                  "name": "counter",
                  "nodeType": "VariableDeclaration",
                  "scope": 141,
                  "src": "1080:23:2",
                  "stateVariable": false,
                  "storageLocation": "storage",
                  "typeDescriptions": {
                    "typeIdentifier": "t_struct$_Counter_$130_storage_ptr",
                    "typeString": "struct Counters.Counter"
                  },
                  "typeName": {
                    "contractScope": null,
                    "id": 131,
                    "name": "Counter",
                    "nodeType": "UserDefinedTypeName",
                    "referencedDeclaration": 130,
                    "src": "1080:7:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_Counter_$130_storage_ptr",
                      "typeString": "struct Counters.Counter"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "1079:25:2"
            },
            "returnParameters": {
              "id": 136,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 135,
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 141,
                  "src": "1128:7:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 134,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "1128:7:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "1127:9:2"
            },
            "scope": 170,
            "src": "1063:112:2",
            "stateMutability": "view",
            "superFunction": null,
            "visibility": "internal"
          },
          {
            "body": {
              "id": 152,
              "nodeType": "Block",
              "src": "1234:36:2",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 150,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "expression": {
                        "argumentTypes": null,
                        "id": 146,
                        "name": "counter",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 143,
                        "src": "1244:7:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_Counter_$130_storage_ptr",
                          "typeString": "struct Counters.Counter storage pointer"
                        }
                      },
                      "id": 148,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "memberName": "_value",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 129,
                      "src": "1244:14:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "+=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "hexValue": "31",
                      "id": 149,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "1262:1:2",
                      "subdenomination": null,
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_1_by_1",
                        "typeString": "int_const 1"
                      },
                      "value": "1"
                    },
                    "src": "1244:19:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 151,
                  "nodeType": "ExpressionStatement",
                  "src": "1244:19:2"
                }
              ]
            },
            "documentation": null,
            "id": 153,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "increment",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 144,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 143,
                  "name": "counter",
                  "nodeType": "VariableDeclaration",
                  "scope": 153,
                  "src": "1200:23:2",
                  "stateVariable": false,
                  "storageLocation": "storage",
                  "typeDescriptions": {
                    "typeIdentifier": "t_struct$_Counter_$130_storage_ptr",
                    "typeString": "struct Counters.Counter"
                  },
                  "typeName": {
                    "contractScope": null,
                    "id": 142,
                    "name": "Counter",
                    "nodeType": "UserDefinedTypeName",
                    "referencedDeclaration": 130,
                    "src": "1200:7:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_Counter_$130_storage_ptr",
                      "typeString": "struct Counters.Counter"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "1199:25:2"
            },
            "returnParameters": {
              "id": 145,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1234:0:2"
            },
            "scope": 170,
            "src": "1181:89:2",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "internal"
          },
          {
            "body": {
              "id": 168,
              "nodeType": "Block",
              "src": "1329:55:2",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 166,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "expression": {
                        "argumentTypes": null,
                        "id": 158,
                        "name": "counter",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 155,
                        "src": "1339:7:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_Counter_$130_storage_ptr",
                          "typeString": "struct Counters.Counter storage pointer"
                        }
                      },
                      "id": 160,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "memberName": "_value",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 129,
                      "src": "1339:14:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "arguments": [
                        {
                          "argumentTypes": null,
                          "hexValue": "31",
                          "id": 164,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "1375:1:2",
                          "subdenomination": null,
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_1_by_1",
                            "typeString": "int_const 1"
                          },
                          "value": "1"
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_rational_1_by_1",
                            "typeString": "int_const 1"
                          }
                        ],
                        "expression": {
                          "argumentTypes": null,
                          "expression": {
                            "argumentTypes": null,
                            "id": 161,
                            "name": "counter",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 155,
                            "src": "1356:7:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_Counter_$130_storage_ptr",
                              "typeString": "struct Counters.Counter storage pointer"
                            }
                          },
                          "id": 162,
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "_value",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 129,
                          "src": "1356:14:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 163,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "sub",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 284,
                        "src": "1356:18:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
                          "typeString": "function (uint256,uint256) pure returns (uint256)"
                        }
                      },
                      "id": 165,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "1356:21:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "1339:38:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 167,
                  "nodeType": "ExpressionStatement",
                  "src": "1339:38:2"
                }
              ]
            },
            "documentation": null,
            "id": 169,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "decrement",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 156,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 155,
                  "name": "counter",
                  "nodeType": "VariableDeclaration",
                  "scope": 169,
                  "src": "1295:23:2",
                  "stateVariable": false,
                  "storageLocation": "storage",
                  "typeDescriptions": {
                    "typeIdentifier": "t_struct$_Counter_$130_storage_ptr",
                    "typeString": "struct Counters.Counter"
                  },
                  "typeName": {
                    "contractScope": null,
                    "id": 154,
                    "name": "Counter",
                    "nodeType": "UserDefinedTypeName",
                    "referencedDeclaration": 130,
                    "src": "1295:7:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_Counter_$130_storage_ptr",
                      "typeString": "struct Counters.Counter"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "1294:25:2"
            },
            "returnParameters": {
              "id": 157,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1329:0:2"
            },
            "scope": 170,
            "src": "1276:108:2",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "internal"
          }
        ],
        "scope": 171,
        "src": "627:759:2"
      }
    ],
    "src": "0:1387:2"
  },
  "legacyAST": {
    "attributes": {
      "absolutePath": "@openzeppelin/contracts/drafts/Counters.sol",
      "exportedSymbols": {
        "Counters": [
          170
        ]
      }
    },
    "children": [
      {
        "attributes": {
          "literals": [
            "solidity",
            "^",
            "0.5",
            ".0"
          ]
        },
        "id": 123,
        "name": "PragmaDirective",
        "src": "0:23:2"
      },
      {
        "attributes": {
          "SourceUnit": 366,
          "absolutePath": "@openzeppelin/contracts/math/SafeMath.sol",
          "file": "../math/SafeMath.sol",
          "scope": 171,
          "symbolAliases": [
            null
          ],
          "unitAlias": ""
        },
        "id": 124,
        "name": "ImportDirective",
        "src": "25:30:2"
      },
      {
        "attributes": {
          "baseContracts": [
            null
          ],
          "contractDependencies": [
            null
          ],
          "contractKind": "library",
          "documentation": "@title Counters\n@author Matt Condon (@shrugs)\n@dev Provides counters that can only be incremented or decremented by one. This can be used e.g. to track the number\nof elements in a mapping, issuing ERC721 ids, or counting request ids.\n * Include with `using Counters for Counters.Counter;`\nSince it is not possible to overflow a 256 bit integer with increments of one, `increment` can skip the SafeMath\noverflow check, thereby saving gas. This does assume however correct usage, in that the underlying `_value` is never\ndirectly accessed.",
          "fullyImplemented": true,
          "linearizedBaseContracts": [
            170
          ],
          "name": "Counters",
          "scope": 171
        },
        "children": [
          {
            "children": [
              {
                "attributes": {
                  "contractScope": null,
                  "name": "SafeMath",
                  "referencedDeclaration": 365,
                  "type": "library SafeMath"
                },
                "id": 125,
                "name": "UserDefinedTypeName",
                "src": "656:8:2"
              },
              {
                "attributes": {
                  "name": "uint256",
                  "type": "uint256"
                },
                "id": 126,
                "name": "ElementaryTypeName",
                "src": "669:7:2"
              }
            ],
            "id": 127,
            "name": "UsingForDirective",
            "src": "650:27:2"
          },
          {
            "attributes": {
              "canonicalName": "Counters.Counter",
              "name": "Counter",
              "scope": 170,
              "visibility": "public"
            },
            "children": [
              {
                "attributes": {
                  "constant": false,
                  "name": "_value",
                  "scope": 130,
                  "stateVariable": false,
                  "storageLocation": "default",
                  "type": "uint256",
                  "value": null,
                  "visibility": "internal"
                },
                "children": [
                  {
                    "attributes": {
                      "name": "uint256",
                      "type": "uint256"
                    },
                    "id": 128,
                    "name": "ElementaryTypeName",
                    "src": "1022:7:2"
                  }
                ],
                "id": 129,
                "name": "VariableDeclaration",
                "src": "1022:14:2"
              }
            ],
            "id": 130,
            "name": "StructDefinition",
            "src": "683:374:2"
          },
          {
            "attributes": {
              "documentation": null,
              "implemented": true,
              "isConstructor": false,
              "kind": "function",
              "modifiers": [
                null
              ],
              "name": "current",
              "scope": 170,
              "stateMutability": "view",
              "superFunction": null,
              "visibility": "internal"
            },
            "children": [
              {
                "children": [
                  {
                    "attributes": {
                      "constant": false,
                      "name": "counter",
                      "scope": 141,
                      "stateVariable": false,
                      "storageLocation": "storage",
                      "type": "struct Counters.Counter",
                      "value": null,
                      "visibility": "internal"
                    },
                    "children": [
                      {
                        "attributes": {
                          "contractScope": null,
                          "name": "Counter",
                          "referencedDeclaration": 130,
                          "type": "struct Counters.Counter"
                        },
                        "id": 131,
                        "name": "UserDefinedTypeName",
                        "src": "1080:7:2"
                      }
                    ],
                    "id": 132,
                    "name": "VariableDeclaration",
                    "src": "1080:23:2"
                  }
                ],
                "id": 133,
                "name": "ParameterList",
                "src": "1079:25:2"
              },
              {
                "children": [
                  {
                    "attributes": {
                      "constant": false,
                      "name": "",
                      "scope": 141,
                      "stateVariable": false,
                      "storageLocation": "default",
                      "type": "uint256",
                      "value": null,
                      "visibility": "internal"
                    },
                    "children": [
                      {
                        "attributes": {
                          "name": "uint256",
                          "type": "uint256"
                        },
                        "id": 134,
                        "name": "ElementaryTypeName",
                        "src": "1128:7:2"
                      }
                    ],
                    "id": 135,
                    "name": "VariableDeclaration",
                    "src": "1128:7:2"
                  }
                ],
                "id": 136,
                "name": "ParameterList",
                "src": "1127:9:2"
              },
              {
                "children": [
                  {
                    "attributes": {
                      "functionReturnParameters": 136
                    },
                    "children": [
                      {
                        "attributes": {
                          "argumentTypes": null,
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "member_name": "_value",
                          "referencedDeclaration": 129,
                          "type": "uint256"
                        },
                        "children": [
                          {
                            "attributes": {
                              "argumentTypes": null,
                              "overloadedDeclarations": [
                                null
                              ],
                              "referencedDeclaration": 132,
                              "type": "struct Counters.Counter storage pointer",
                              "value": "counter"
                            },
                            "id": 137,
                            "name": "Identifier",
                            "src": "1154:7:2"
                          }
                        ],
                        "id": 138,
                        "name": "MemberAccess",
                        "src": "1154:14:2"
                      }
                    ],
                    "id": 139,
                    "name": "Return",
                    "src": "1147:21:2"
                  }
                ],
                "id": 140,
                "name": "Block",
                "src": "1137:38:2"
              }
            ],
            "id": 141,
            "name": "FunctionDefinition",
            "src": "1063:112:2"
          },
          {
            "attributes": {
              "documentation": null,
              "implemented": true,
              "isConstructor": false,
              "kind": "function",
              "modifiers": [
                null
              ],
              "name": "increment",
              "scope": 170,
              "stateMutability": "nonpayable",
              "superFunction": null,
              "visibility": "internal"
            },
            "children": [
              {
                "children": [
                  {
                    "attributes": {
                      "constant": false,
                      "name": "counter",
                      "scope": 153,
                      "stateVariable": false,
                      "storageLocation": "storage",
                      "type": "struct Counters.Counter",
                      "value": null,
                      "visibility": "internal"
                    },
                    "children": [
                      {
                        "attributes": {
                          "contractScope": null,
                          "name": "Counter",
                          "referencedDeclaration": 130,
                          "type": "struct Counters.Counter"
                        },
                        "id": 142,
                        "name": "UserDefinedTypeName",
                        "src": "1200:7:2"
                      }
                    ],
                    "id": 143,
                    "name": "VariableDeclaration",
                    "src": "1200:23:2"
                  }
                ],
                "id": 144,
                "name": "ParameterList",
                "src": "1199:25:2"
              },
              {
                "attributes": {
                  "parameters": [
                    null
                  ]
                },
                "children": [],
                "id": 145,
                "name": "ParameterList",
                "src": "1234:0:2"
              },
              {
                "children": [
                  {
                    "children": [
                      {
                        "attributes": {
                          "argumentTypes": null,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "operator": "+=",
                          "type": "uint256"
                        },
                        "children": [
                          {
                            "attributes": {
                              "argumentTypes": null,
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": true,
                              "member_name": "_value",
                              "referencedDeclaration": 129,
                              "type": "uint256"
                            },
                            "children": [
                              {
                                "attributes": {
                                  "argumentTypes": null,
                                  "overloadedDeclarations": [
                                    null
                                  ],
                                  "referencedDeclaration": 143,
                                  "type": "struct Counters.Counter storage pointer",
                                  "value": "counter"
                                },
                                "id": 146,
                                "name": "Identifier",
                                "src": "1244:7:2"
                              }
                            ],
                            "id": 148,
                            "name": "MemberAccess",
                            "src": "1244:14:2"
                          },
                          {
                            "attributes": {
                              "argumentTypes": null,
                              "hexvalue": "31",
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "subdenomination": null,
                              "token": "number",
                              "type": "int_const 1",
                              "value": "1"
                            },
                            "id": 149,
                            "name": "Literal",
                            "src": "1262:1:2"
                          }
                        ],
                        "id": 150,
                        "name": "Assignment",
                        "src": "1244:19:2"
                      }
                    ],
                    "id": 151,
                    "name": "ExpressionStatement",
                    "src": "1244:19:2"
                  }
                ],
                "id": 152,
                "name": "Block",
                "src": "1234:36:2"
              }
            ],
            "id": 153,
            "name": "FunctionDefinition",
            "src": "1181:89:2"
          },
          {
            "attributes": {
              "documentation": null,
              "implemented": true,
              "isConstructor": false,
              "kind": "function",
              "modifiers": [
                null
              ],
              "name": "decrement",
              "scope": 170,
              "stateMutability": "nonpayable",
              "superFunction": null,
              "visibility": "internal"
            },
            "children": [
              {
                "children": [
                  {
                    "attributes": {
                      "constant": false,
                      "name": "counter",
                      "scope": 169,
                      "stateVariable": false,
                      "storageLocation": "storage",
                      "type": "struct Counters.Counter",
                      "value": null,
                      "visibility": "internal"
                    },
                    "children": [
                      {
                        "attributes": {
                          "contractScope": null,
                          "name": "Counter",
                          "referencedDeclaration": 130,
                          "type": "struct Counters.Counter"
                        },
                        "id": 154,
                        "name": "UserDefinedTypeName",
                        "src": "1295:7:2"
                      }
                    ],
                    "id": 155,
                    "name": "VariableDeclaration",
                    "src": "1295:23:2"
                  }
                ],
                "id": 156,
                "name": "ParameterList",
                "src": "1294:25:2"
              },
              {
                "attributes": {
                  "parameters": [
                    null
                  ]
                },
                "children": [],
                "id": 157,
                "name": "ParameterList",
                "src": "1329:0:2"
              },
              {
                "children": [
                  {
                    "children": [
                      {
                        "attributes": {
                          "argumentTypes": null,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "operator": "=",
                          "type": "uint256"
                        },
                        "children": [
                          {
                            "attributes": {
                              "argumentTypes": null,
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": true,
                              "member_name": "_value",
                              "referencedDeclaration": 129,
                              "type": "uint256"
                            },
                            "children": [
                              {
                                "attributes": {
                                  "argumentTypes": null,
                                  "overloadedDeclarations": [
                                    null
                                  ],
                                  "referencedDeclaration": 155,
                                  "type": "struct Counters.Counter storage pointer",
                                  "value": "counter"
                                },
                                "id": 158,
                                "name": "Identifier",
                                "src": "1339:7:2"
                              }
                            ],
                            "id": 160,
                            "name": "MemberAccess",
                            "src": "1339:14:2"
                          },
                          {
                            "attributes": {
                              "argumentTypes": null,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "isStructConstructorCall": false,
                              "lValueRequested": false,
                              "names": [
                                null
                              ],
                              "type": "uint256",
                              "type_conversion": false
                            },
                            "children": [
                              {
                                "attributes": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_rational_1_by_1",
                                      "typeString": "int_const 1"
                                    }
                                  ],
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "member_name": "sub",
                                  "referencedDeclaration": 284,
                                  "type": "function (uint256,uint256) pure returns (uint256)"
                                },
                                "children": [
                                  {
                                    "attributes": {
                                      "argumentTypes": null,
                                      "isConstant": false,
                                      "isLValue": true,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "member_name": "_value",
                                      "referencedDeclaration": 129,
                                      "type": "uint256"
                                    },
                                    "children": [
                                      {
                                        "attributes": {
                                          "argumentTypes": null,
                                          "overloadedDeclarations": [
                                            null
                                          ],
                                          "referencedDeclaration": 155,
                                          "type": "struct Counters.Counter storage pointer",
                                          "value": "counter"
                                        },
                                        "id": 161,
                                        "name": "Identifier",
                                        "src": "1356:7:2"
                                      }
                                    ],
                                    "id": 162,
                                    "name": "MemberAccess",
                                    "src": "1356:14:2"
                                  }
                                ],
                                "id": 163,
                                "name": "MemberAccess",
                                "src": "1356:18:2"
                              },
                              {
                                "attributes": {
                                  "argumentTypes": null,
                                  "hexvalue": "31",
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "lValueRequested": false,
                                  "subdenomination": null,
                                  "token": "number",
                                  "type": "int_const 1",
                                  "value": "1"
                                },
                                "id": 164,
                                "name": "Literal",
                                "src": "1375:1:2"
                              }
                            ],
                            "id": 165,
                            "name": "FunctionCall",
                            "src": "1356:21:2"
                          }
                        ],
                        "id": 166,
                        "name": "Assignment",
                        "src": "1339:38:2"
                      }
                    ],
                    "id": 167,
                    "name": "ExpressionStatement",
                    "src": "1339:38:2"
                  }
                ],
                "id": 168,
                "name": "Block",
                "src": "1329:55:2"
              }
            ],
            "id": 169,
            "name": "FunctionDefinition",
            "src": "1276:108:2"
          }
        ],
        "id": 170,
        "name": "ContractDefinition",
        "src": "627:759:2"
      }
    ],
    "id": 171,
    "name": "SourceUnit",
    "src": "0:1387:2"
  },
  "compiler": {
    "name": "solc",
    "version": "0.5.0+commit.1d4f565a.Emscripten.clang"
  },
  "networks": {},
  "schemaVersion": "3.4.1",
  "updatedAt": "2021-05-30T05:19:39.029Z",
  "devdoc": {
    "author": "Matt Condon (@shrugs)",
    "details": "Provides counters that can only be incremented or decremented by one. This can be used e.g. to track the number of elements in a mapping, issuing ERC721 ids, or counting request ids. * Include with `using Counters for Counters.Counter;` Since it is not possible to overflow a 256 bit integer with increments of one, `increment` can skip the SafeMath overflow check, thereby saving gas. This does assume however correct usage, in that the underlying `_value` is never directly accessed.",
    "methods": {},
    "title": "Counters"
  },
  "userdoc": {
    "methods": {}
  }
}